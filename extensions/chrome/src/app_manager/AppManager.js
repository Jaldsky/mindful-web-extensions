const BaseManager = typeof window !== 'undefined' ? window.BaseManager : require('./BaseManager.js');
const DOMManager = typeof window !== 'undefined' ? window.DOMManager : require('./DOMManager.js');
const NotificationManager = typeof window !== 'undefined' ? window.NotificationManager : require('./NotificationManager.js');
const ServiceWorkerManager = typeof window !== 'undefined' ? window.ServiceWorkerManager : require('./ServiceWorkerManager.js');
const DiagnosticsManager = typeof window !== 'undefined' ? window.DiagnosticsManager : require('./DiagnosticsManager.js');

/**
 * –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—â–∏–π —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ popup.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.
 * 
 * @class AppManager
 * @extends BaseManager
 */
class AppManager extends BaseManager {
    /**
     * –ú–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
     * @readonly
     * @static
     */
    static BUTTON_LABELS = {
        TEST_CONNECTION: {
            DEFAULT: 'üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
            LOADING: '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...'
        },
        RUN_DIAGNOSTICS: {
            DEFAULT: 'üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
            LOADING: '‚è≥ –ê–Ω–∞–ª–∏–∑...'
        }
    };

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä AppManager.
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.
     * 
     * @param {Object} [options={}] - –û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * @param {boolean} [options.enableLogging=true] - –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    constructor(options = {}) {
        super({
            enableLogging: options.enableLogging !== undefined ? options.enableLogging : true,
            ...options
        });

        this.domManager = new DOMManager();
        this.notificationManager = new NotificationManager();
        this.serviceWorkerManager = new ServiceWorkerManager();
        this.diagnosticsManager = new DiagnosticsManager(
            this.serviceWorkerManager, 
            this.notificationManager
        );

        this.updateInterval = null;

        this.eventHandlers = new Map();

        this.isInitialized = false;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
     * 
     * @async
     * @returns {Promise<void>}
     */
    async init() {
        if (this.isInitialized) {
            this._log('AppManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        try {
            this._log('–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AppManager');

            await this.loadInitialStatus();

            this.setupEventHandlers();

            this.startPeriodicUpdates();
            
            this.isInitialized = true;
            this._log('AppManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            this._logError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AppManager', error);
            this.notificationManager.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', 'error');
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã.
     * 
     * @async
     * @returns {Promise<void>}
     */
    async loadInitialStatus() {
        try {
            const isOnline = await this.serviceWorkerManager.checkConnection();
            this.domManager.updateConnectionStatus(isOnline);

            const trackingStatus = await this.serviceWorkerManager.getTrackingStatus();
            this.domManager.updateTrackingStatus(trackingStatus.isTracking);

            const stats = await this.serviceWorkerManager.getTodayStats();
            this.domManager.updateCounters(stats);
            
            console.log('Initial status loaded:', { isOnline, trackingStatus, stats });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
            this.notificationManager.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', 'error');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫.
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ Map –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏.
     * 
     * @returns {void}
     */
    setupEventHandlers() {
        this._log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');

        if (this.domManager.elements.openSettings) {
            const handler = () => {
                this._log('–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫');
                chrome.runtime.openOptionsPage();
            };
            this.domManager.elements.openSettings.addEventListener('click', handler);
            this.eventHandlers.set('openSettings', handler);
        }

        if (this.domManager.elements.testConnection) {
            const handler = async () => {
                await this.testConnection();
            };
            this.domManager.elements.testConnection.addEventListener('click', handler);
            this.eventHandlers.set('testConnection', handler);
        }

        if (this.domManager.elements.reloadExtension) {
            const handler = () => {
                this._log('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
                chrome.runtime.reload();
            };
            this.domManager.elements.reloadExtension.addEventListener('click', handler);
            this.eventHandlers.set('reloadExtension', handler);
        }

        if (this.domManager.elements.runDiagnostics) {
            const handler = async () => {
                await this.runDiagnostics();
            };
            this.domManager.elements.runDiagnostics.addEventListener('click', handler);
            this.eventHandlers.set('runDiagnostics', handler);
        }

        this._log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${this.eventHandlers.size}`);
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.
     *
     * @async
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
     */
    async testConnection() {
        const button = this.domManager.elements.testConnection;
        
        try {
            this._log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');

            this.domManager.setButtonState(
                button,
                AppManager.BUTTON_LABELS.TEST_CONNECTION.LOADING,
                true
            );

            const isOnline = await this.serviceWorkerManager.checkConnection();

            if (isOnline) {
                this.notificationManager.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!', 'success');
                this.domManager.updateConnectionStatus(true);
                this.updateState({ isOnline: true });
                this._log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: —É—Å–ø–µ—à–Ω–æ');
            } else {
                this.notificationManager.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å', 'error');
                this.domManager.updateConnectionStatus(false);
                this.updateState({ isOnline: false });
                this._log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –Ω–µ—É–¥–∞—á–∞');
            }

            return isOnline;
        } catch (error) {
            this._logError('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', error);
            this.notificationManager.showNotification('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
            this.domManager.updateConnectionStatus(false);
            this.updateState({ isOnline: false });
            return false;
        } finally {
            this.domManager.setButtonState(
                button,
                AppManager.BUTTON_LABELS.TEST_CONNECTION.DEFAULT,
                false
            );
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.
     *
     * @async
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
     */
    async runDiagnostics() {
        const button = this.domManager.elements.runDiagnostics;
        
        try {
            this._log('–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');

            this.domManager.setButtonState(
                button,
                AppManager.BUTTON_LABELS.RUN_DIAGNOSTICS.LOADING,
                true
            );

            const results = await this.diagnosticsManager.runDiagnostics();
            this.diagnosticsManager.displayDiagnosticResults(results);

            this._log('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', { overall: results.overall });

            return results;
        } catch (error) {
            this._logError('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏', error);
            this.notificationManager.showNotification('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏', 'error');
            throw error;
        } finally {
            this.domManager.setButtonState(
                button,
                AppManager.BUTTON_LABELS.RUN_DIAGNOSTICS.DEFAULT,
                false
            );
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
     * 
     * @returns {void}
     */
    startPeriodicUpdates() {
        if (this.updateInterval) {
            this._log('–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã');
            return;
        }

        this._log('–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
        
        this.updateInterval = setInterval(async () => {
            try {
                await this.loadInitialStatus();
            } catch (error) {
                this._logError('–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', error);
            }
        }, this.CONSTANTS.UPDATE_INTERVAL);
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
     * 
     * @private
     * @returns {void}
     */
    _stopPeriodicUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
            this._log('–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ popup.
     *
     * @returns {void}
     */
    destroy() {
        if (!this.isInitialized) {
            this._log('AppManager —É–∂–µ –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
            return;
        }

        this._log('–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ AppManager');

        try {
            this._stopPeriodicUpdates();
            this._removeEventHandlers();
            this._destroyManagers();

            this.isInitialized = false;
            this._log('AppManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
        } catch (error) {
            this._logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ AppManager', error);
        }

        super.destroy();
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π.
     *
     * @private
     * @returns {void}
     */
    _removeEventHandlers() {
        try {
            this.eventHandlers.forEach((handler, key) => {
                const element = this.domManager.elements[key];
                if (element && handler) {
                    element.removeEventListener('click', handler);
                }
            });

            this.eventHandlers.clear();
            this._log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω—ã');
        } catch (error) {
            this._logError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π', error);
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã.
     *
     * @private
     * @returns {void}
     */
    _destroyManagers() {
        try {
            if (this.diagnosticsManager) {
                this.diagnosticsManager.destroy();
                this.diagnosticsManager = null;
            }

            if (this.serviceWorkerManager) {
                this.serviceWorkerManager.destroy();
                this.serviceWorkerManager = null;
            }

            if (this.notificationManager) {
                this.notificationManager.destroy();
                this.notificationManager = null;
            }

            if (this.domManager) {
                this.domManager.destroy();
                this.domManager = null;
            }

            this._log('–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã');
        } catch (error) {
            this._logError('–û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤', error);
        }
    }
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = AppManager;
}

if (typeof window !== 'undefined') {
    window.AppManager = AppManager;

    document.addEventListener('DOMContentLoaded', () => {
        window.appManager = new AppManager();
    });

    window.addEventListener('beforeunload', () => {
        if (window.appManager) {
            window.appManager.destroy();
        }
    });
}